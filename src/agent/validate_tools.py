"""
Script de validation des outils LangGraph L√©gifrance.

Ce script v√©rifie que tous les outils sont correctement configur√©s
et peuvent √™tre utilis√©s par l'agent LangGraph.
"""

import json
from typing import Dict, Any
from tools import get_available_tools, test_mcp_connection, get_mcp_server_info


def validate_tool_structure(tool) -> Dict[str, Any]:
    """
    Valide la structure d'un outil LangChain.
    
    Args:
        tool: Outil √† valider
        
    Returns:
        Dictionnaire avec les r√©sultats de validation
    """
    validation = {
        "name": tool.name,
        "has_description": bool(tool.description),
        "has_args_schema": hasattr(tool, 'args_schema') and tool.args_schema is not None,
        "schema_fields": [],
        "errors": []
    }
    
    # V√©rifier le sch√©ma d'arguments
    if validation["has_args_schema"]:
        try:
            schema = tool.args_schema.schema()
            validation["schema_fields"] = list(schema.get("properties", {}).keys())
            validation["schema_valid"] = True
        except Exception as e:
            validation["errors"].append(f"Erreur sch√©ma: {e}")
            validation["schema_valid"] = False
    else:
        validation["errors"].append("Pas de sch√©ma d'arguments d√©fini")
        validation["schema_valid"] = False
    
    # V√©rifier que l'outil est invocable
    try:
        # Test avec des arguments vides pour v√©rifier la structure
        tool.get_input_schema()
        validation["invocable"] = True
    except Exception as e:
        validation["errors"].append(f"Outil non invocable: {e}")
        validation["invocable"] = False
    
    return validation


def test_tool_invocation(tool, test_args: Dict[str, Any]) -> Dict[str, Any]:
    """
    Teste l'invocation d'un outil avec des arguments de test.
    
    Args:
        tool: Outil √† tester
        test_args: Arguments de test
        
    Returns:
        R√©sultats du test
    """
    test_result = {
        "tool_name": tool.name,
        "test_args": test_args,
        "success": False,
        "response": None,
        "error": None,
        "response_length": 0
    }
    
    try:
        response = tool.invoke(test_args)
        test_result["success"] = True
        test_result["response"] = response
        test_result["response_length"] = len(str(response))
        
        # V√©rifier que la r√©ponse n'est pas une erreur
        response_str = str(response).lower()
        if any(error_keyword in response_str for error_keyword in ["erreur", "error", "connexion", "timeout"]):
            test_result["warning"] = "La r√©ponse semble contenir une erreur"
            
    except Exception as e:
        test_result["error"] = str(e)
    
    return test_result


def validate_all_tools():
    """Valide tous les outils disponibles."""
    print("üîç Validation des outils LangGraph L√©gifrance")
    print("=" * 60)
    
    # 1. Tester la connexion MCP
    print("\nüì° Test de connexion MCP")
    print("-" * 30)
    
    mcp_available = test_mcp_connection()
    if mcp_available:
        print("‚úÖ Serveur MCP accessible")
        server_info = get_mcp_server_info()
        if server_info:
            print(f"üìä Info serveur: {json.dumps(server_info, indent=2)}")
    else:
        print("‚ö†Ô∏è  Serveur MCP non accessible - les tests d'invocation pourraient √©chouer")
    
    # 2. R√©cup√©rer et valider les outils
    print("\nüîß Validation de la structure des outils")
    print("-" * 40)
    
    tools = get_available_tools()
    print(f"Nombre d'outils trouv√©s: {len(tools)}")
    
    validation_results = []
    for tool in tools:
        validation = validate_tool_structure(tool)
        validation_results.append(validation)
        
        # Afficher les r√©sultats
        print(f"\nüìù Outil: {validation['name']}")
        print(f"   Description: {'‚úÖ' if validation['has_description'] else '‚ùå'}")
        print(f"   Sch√©ma args: {'‚úÖ' if validation['has_args_schema'] else '‚ùå'}")
        print(f"   Invocable: {'‚úÖ' if validation['invocable'] else '‚ùå'}")
        print(f"   Champs: {validation['schema_fields']}")
        
        if validation['errors']:
            print(f"   ‚ö†Ô∏è  Erreurs: {validation['errors']}")
    
    # 3. Tests d'invocation
    print("\nüöÄ Tests d'invocation des outils")
    print("-" * 35)
    
    # Arguments de test pour chaque outil
    test_cases = {
        "search_legifrance": {"query": "test validation", "max_results": 1},
        "get_article": {"article_id": "L3141-1"},
        "browse_code": {"code_name": "Code du travail", "section": "L3141"}
    }
    
    invocation_results = []
    for tool in tools:
        if tool.name in test_cases:
            test_args = test_cases[tool.name]
            result = test_tool_invocation(tool, test_args)
            invocation_results.append(result)
            
            # Afficher les r√©sultats
            print(f"\nüß™ Test {tool.name}")
            print(f"   Arguments: {test_args}")
            print(f"   Succ√®s: {'‚úÖ' if result['success'] else '‚ùå'}")
            print(f"   Longueur r√©ponse: {result['response_length']} chars")
            
            if result['error']:
                print(f"   ‚ùå Erreur: {result['error']}")
            elif result.get('warning'):
                print(f"   ‚ö†Ô∏è  {result['warning']}")
            elif result['success']:
                # Afficher un aper√ßu de la r√©ponse
                response_preview = str(result['response'])[:100]
                print(f"   üìÑ Aper√ßu: {response_preview}...")
    
    # 4. R√©sum√© des r√©sultats
    print("\nüìä R√©sum√© de la validation")
    print("=" * 30)
    
    total_tools = len(tools)
    valid_structure = sum(1 for v in validation_results if v['invocable'] and v['has_args_schema'])
    successful_invocations = sum(1 for r in invocation_results if r['success'])
    
    print(f"Outils totaux: {total_tools}")
    print(f"Structure valide: {valid_structure}/{total_tools}")
    print(f"Invocations r√©ussies: {successful_invocations}/{len(test_cases)}")
    
    # Statut global
    if valid_structure == total_tools and (not mcp_available or successful_invocations > 0):
        print("\n‚úÖ Validation globale: SUCC√àS")
        return True
    else:
        print("\n‚ùå Validation globale: √âCHEC")
        if valid_structure != total_tools:
            print("   - Probl√®mes de structure des outils")
        if mcp_available and successful_invocations == 0:
            print("   - Aucune invocation r√©ussie malgr√© serveur MCP disponible")
        return False


def generate_tools_report():
    """G√©n√®re un rapport d√©taill√© des outils."""
    print("\nüìã G√©n√©ration du rapport des outils")
    print("-" * 40)
    
    tools = get_available_tools()
    
    report = {
        "timestamp": str(type(None).__module__ == "builtins" and True),  # Simple timestamp
        "mcp_server_available": test_mcp_connection(),
        "tools_count": len(tools),
        "tools": []
    }
    
    for tool in tools:
        tool_info = {
            "name": tool.name,
            "description": tool.description,
            "schema": None
        }
        
        # Extraire le sch√©ma
        try:
            if hasattr(tool, 'args_schema') and tool.args_schema:
                schema = tool.args_schema.schema()
                tool_info["schema"] = {
                    "properties": schema.get("properties", {}),
                    "required": schema.get("required", [])
                }
        except Exception as e:
            tool_info["schema_error"] = str(e)
        
        report["tools"].append(tool_info)
    
    # Sauvegarder le rapport
    try:
        with open("tools_validation_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        print("‚úÖ Rapport sauvegard√©: tools_validation_report.json")
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde rapport: {e}")
    
    return report


def main():
    """Fonction principale de validation."""
    try:
        # Validation compl√®te
        success = validate_all_tools()
        
        # G√©n√©ration du rapport
        generate_tools_report()
        
        # Statut final
        if success:
            print("\nüéâ Validation termin√©e avec succ√®s!")
            print("Les outils sont pr√™ts pour l'utilisation avec l'agent LangGraph.")
        else:
            print("\n‚ö†Ô∏è  Validation termin√©e avec des probl√®mes.")
            print("V√©rifiez les erreurs ci-dessus avant d'utiliser l'agent.")
        
        return success
        
    except Exception as e:
        print(f"\n‚ùå Erreur durant la validation: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    main() 